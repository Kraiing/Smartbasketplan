import React, { useState, useEffect } from 'react';
import LanguageSwitcher from './LanguageSwitcher';
import { translations } from '../i18n/translations';
import TeamPositionsManager from './TeamPositionsManager';

const MenuBar = ({
  onAddPlayer,
  onRemovePlayer,
  onResetPositions,
  onUndo,
  onRedo,
  onClearAllLines,
  onResetBallPassState,
  activePositions,
  onTogglePosition
}) => {
  const [language, setLanguage] = useState('th');
  const [showPlayerMenu, setShowPlayerMenu] = useState(false);
  const [showAboutModal, setShowAboutModal] = useState(false);
  const [showRedTeamMenu, setShowRedTeamMenu] = useState(false);
  const [showWhiteTeamMenu, setShowWhiteTeamMenu] = useState(false);
  const [isIOS, setIsIOS] = useState(false);
  const [isLandscape, setIsLandscape] = useState(false);
  const t = translations[language] || translations.th;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå iOS ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  useEffect(() => {
    const checkIOS = () => {
      const isAppleDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) ||
                           (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
      setIsIOS(isAppleDevice);
    };
    
    const checkOrientation = () => {
      setIsLandscape(window.innerWidth > window.innerHeight);
    };
    
    checkIOS();
    checkOrientation();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≠
    window.addEventListener('resize', checkOrientation);
    window.addEventListener('orientationchange', () => {
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      setTimeout(checkOrientation, 100);
    });
    
    return () => {
      window.removeEventListener('resize', checkOrientation);
      window.removeEventListener('orientationchange', checkOrientation);
    };
  }, []);
  
  // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (showPlayerMenu && e.target.closest('.player-menu-container') === null) {
        setShowPlayerMenu(false);
      }
      if (showRedTeamMenu && e.target.closest('.red-team-menu-container') === null) {
        setShowRedTeamMenu(false);
      }
      if (showWhiteTeamMenu && e.target.closest('.white-team-menu-container') === null) {
        setShowWhiteTeamMenu(false);
      }
    };
    
    document.addEventListener('pointerdown', handleClickOutside);
    
    return () => {
      document.removeEventListener('pointerdown', handleClickOutside);
    };
  }, [showPlayerMenu, showRedTeamMenu, showWhiteTeamMenu]);
  
  const handleAddRedPlayer = () => {
    onAddPlayer('red');
    setShowPlayerMenu(false);
  };
  
  const handleAddWhitePlayer = () => {
    onAddPlayer('white');
    setShowPlayerMenu(false);
  };
  
  const handleRemoveRedPlayer = () => {
    onRemovePlayer('red');
    setShowPlayerMenu(false);
  };
  
  const handleRemoveWhitePlayer = () => {
    onRemovePlayer('white');
    setShowPlayerMenu(false);
  };
  
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå iOS
  const handleTouchStartButton = (e) => {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (isIOS) {
      e.currentTarget.style.opacity = '0.7';
    }
  };
  
  const handleTouchEndButton = (e) => {
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Ñ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°
    if (isIOS) {
      e.currentTarget.style.opacity = '1';
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleOpenAboutModal = () => {
    setShowAboutModal(true);
  };

  // ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleCloseAboutModal = () => {
    setShowAboutModal(false);
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡πÅ‡∏î‡∏á
  const handleToggleRedTeamMenu = () => {
    setShowRedTeamMenu(!showRedTeamMenu);
    setShowWhiteTeamMenu(false);
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏ß
  const handleToggleWhiteTeamMenu = () => {
    setShowWhiteTeamMenu(!showWhiteTeamMenu);
    setShowRedTeamMenu(false);
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
  const handleLanguageChange = (newLanguage) => {
    setLanguage(newLanguage);
  };
  
  return (
    <div className={`w-full bg-orange-400 text-white px-4 py-2 shadow-md z-50 relative menu-bar ${isIOS ? 'ios-menu' : ''} ${isLandscape ? 'landscape' : 'portrait'}`}>
      <div className="flex justify-between items-center max-w-7xl mx-auto">
        <div className="flex items-center gap-2">
          <span role="img" aria-label="basketball">üèÄ</span>
          <h1 className={`font-bold ${isLandscape && isIOS ? 'text-lg' : 'text-xl'}`}>{t.appTitle}</h1>
        </div>
        
        <div className="flex items-center gap-2 md:gap-3">
          {/* ‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏î‡∏£‡πá‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå */}
          <div className="relative player-menu-container">
            <button
              className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
              onClick={() => setShowPlayerMenu(!showPlayerMenu)}
              onTouchStart={handleTouchStartButton}
              onTouchEnd={handleTouchEndButton}
            >
              {t.playerMenu} ‚ñº
            </button>
            
            {showPlayerMenu && (
              <div className={`absolute right-0 mt-1 bg-white bg-opacity-30 backdrop-blur-sm shadow-lg rounded py-1 z-50 ${isIOS ? 'w-48' : 'w-44'}`}>
                <div className="text-center font-bold text-gray-700 py-1 border-b border-gray-200">
                  {t.positionsManagement}
                </div>
                
                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡∏°‡πÅ‡∏î‡∏á */}
                <div className="relative red-team-menu-container">
                  <button
                    className="w-full text-left px-4 py-2 text-red-600 hover:bg-gray-100 flex items-center justify-between"
                    onClick={handleToggleRedTeamMenu}
                    onTouchStart={handleTouchStartButton}
                    onTouchEnd={handleTouchEndButton}
                  >
                    <div className="flex items-center">
                      <img 
                        src="/red-player.png" 
                        alt="red player" 
                        className="w-5 h-5 mr-2" 
                      />
                      {t.teamRed}
                    </div>
                    <span>‚ñ∂</span>
                  </button>
                  
                  {showRedTeamMenu && (
                    <div className="absolute left-full top-0 mt-0 ml-1 bg-white bg-opacity-30 backdrop-blur-sm shadow-lg rounded-lg py-2 z-50 w-64 border border-red-100 animate-fade-in">
                      <TeamPositionsManager 
                        team="red" 
                        activePositions={activePositions && activePositions.red ? activePositions.red : {
                          PG: true, SG: true, SF: true, PF: true, C: true
                        }} 
                        onTogglePosition={onTogglePosition || (() => {})} 
                        t={t}
                        isIOS={isIOS}
                      />
                    </div>
                  )}
                </div>
                
                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏ß */}
                <div className="relative white-team-menu-container">
                  <button
                    className="w-full text-left px-4 py-2 text-gray-700 hover:bg-gray-100 flex items-center justify-between"
                    onClick={handleToggleWhiteTeamMenu}
                    onTouchStart={handleTouchStartButton}
                    onTouchEnd={handleTouchEndButton}
                  >
                    <div className="flex items-center">
                      <img 
                        src="/white-player.png" 
                        alt="white player" 
                        className="w-5 h-5 mr-2" 
                      />
                      {t.teamWhite}
                    </div>
                    <span>‚ñ∂</span>
                  </button>
                  
                  {showWhiteTeamMenu && (
                    <div className="absolute left-full top-0 mt-0 ml-1 bg-white bg-opacity-50 backdrop-blur-sm shadow-lg rounded-lg py-2 z-50 w-64 border border-blue-100 animate-fade-in">
                      <TeamPositionsManager 
                        team="white" 
                        activePositions={activePositions && activePositions.white ? activePositions.white : {
                          PG: true, SG: true, SF: true, PF: true, C: true
                        }} 
                        onTogglePosition={onTogglePosition || (() => {})} 
                        t={t}
                        isIOS={isIOS}
                      />
                    </div>
                  )}
                </div>
                
                <div className="border-t border-gray-200 my-1"></div>
                
                {/* ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
              </div>
            )}
          </div>
          
          <button
            className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
            onClick={onResetPositions}
            onTouchStart={handleTouchStartButton}
            onTouchEnd={handleTouchEndButton}
            title={t.resetPositions}
          >
            {isIOS && isLandscape ? <span role="img" aria-label="reset">üîÑ</span> : t.resetPositions}
          </button>
          
          <button
            className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
            onClick={onUndo}
            onTouchStart={handleTouchStartButton}
            onTouchEnd={handleTouchEndButton}
            title="Undo"
          >
            ‚Ü©Ô∏è
          </button>
          
          <button
            className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
            onClick={onRedo}
            onTouchStart={handleTouchStartButton}
            onTouchEnd={handleTouchEndButton}
            title="Redo"
          >
            ‚Ü™Ô∏è
          </button>
          
          <button
            className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
            onClick={onClearAllLines}
            onTouchStart={handleTouchStartButton}
            onTouchEnd={handleTouchEndButton}
            title="Clear Lines"
          >
            üßπ
          </button>
          
          {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á */}
          {isIOS && (
            <button
              className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100 text-xs"
              onClick={onResetBallPassState}
              onTouchStart={handleTouchStartButton}
              onTouchEnd={handleTouchEndButton}
              title="Reset Ball Animation"
            >
              üèÄ‚ö†Ô∏è
            </button>
          )}
          
          {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (i) */}
          <button
            className="bg-white text-orange-600 px-3 py-1 rounded hover:bg-gray-100"
            onClick={handleOpenAboutModal}
            onTouchStart={handleTouchStartButton}
            onTouchEnd={handleTouchEndButton}
          >
            {isIOS && isLandscape ? "‚ÑπÔ∏è" : t.aboutButton}
          </button>
          
          <LanguageSwitcher
            currentLanguage={language}
            onLanguageChange={handleLanguageChange}
          />
        </div>
      </div>
      
      {/* ‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
      {showAboutModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white text-black p-5 rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <h2 className="font-bold text-xl text-center mb-2">{t.aboutTitle}</h2>
            
            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ */}
            <div className="mb-4">
              <p className="font-semibold">{t.developedBy}</p>
              <p className="text-orange-600 font-medium">{t.developerName}</p>
            </div>
            
            {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
            <div className="mb-4">
              <h3 className="font-bold text-lg mb-2">{t.howToUse}</h3>
              <ul className="space-y-1">
                {t.instructions.map((instruction, index) => (
                  <li key={index} className="text-sm">{instruction}</li>
                ))}
              </ul>
            </div>
            
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î */}
            <div className="text-center mt-4">
              <button
                className="bg-orange-500 text-white px-6 py-2 rounded hover:bg-orange-600"
                onClick={handleCloseAboutModal}
                onTouchStart={handleTouchStartButton}
                onTouchEnd={handleTouchEndButton}
              >
                {t.close}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MenuBar;